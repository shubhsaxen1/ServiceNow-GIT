<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function ($scope, $sce, $location, spUtil, $element, $timeout, $rootScope, spFacetsClientService, spFacetManager, $window, spAriaUtil) {
	var url = null;

	spUtil.setSearchPage($scope.data.t);
	$scope.isLoading = true;
	$scope.isFilterMenuLoading = true;
	$scope.showPagination = false;
	$scope.showFilterMenu = false;
	$scope.isFilterApplied = spFacetManager.isAnyFacetSelected();
	$scope.showApply = false;
	$scope.collpaseFacets = !$scope.data.t || $scope.data.t == "" ;

	$scope.getBGImage = function(item) {
		return {"background-image": "url('" + item.picture + "')"};
	}

	$scope.search = function(searchTerm) {
		$location.search('q', searchTerm);
	}

	$scope.clearAll = function () {
		spFacetManager.clearAllFacet();
		$scope.isFilterApplied = false;
	}

	$scope.fetchMoreResults = function(query_start_location) {
		fetch(query_start_location);
	}

	$scope.openFilterMenu = function() {
		url = $location.url();
		$scope.showApply = false;
		$scope.showFilterMenu = true;
	}

	$scope.cancel = function () {
		if(url) {
			$location.url(url);
		}
    $scope.showFilterMenu = false;
	}

	$scope.apply = function () {
		$scope.showFilterMenu = false;
	}

	fetch(0);

	$scope.$on('$locationChangeSuccess', onLocationChangeSuccess);

	$scope.highlight = function(haystack, needle) {
		if (!haystack)
			return "";

		if (!needle)
			return haystack;

		return haystack.replace(new RegExp(needle.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1"), "gi"), function(match) {
			return '<span class="highlight mark">' + match + '</span>';
		});
	}

	$scope.smallScreenSize = isSmallScreenSize();

	function isSmallScreenSize() {
		return $window.matchMedia('(max-width: 767px)').matches;
	}

	angular.element($window).on('resize', function () {
		$scope.smallScreenSize = isSmallScreenSize();
	});

	function onLocationChangeSuccess(event, newUrl, oldUrl) {
		if(!pageChanged(newUrl, oldUrl)) {
			fetch();
		}
	}

	function pageChanged(newUrl, oldUrl) {
		var newUrlParams = newUrl.match(/id=.+/),
		oldUrlParams = oldUrl.match(/id=.+/);

		if(!newUrlParams && !oldUrlParams) {
			return false;
		}

		if((!newUrlParams && oldUrlParams) || (newUrlParams && !oldUrlParams)) {
			return true;
		}

		return newUrlParams[0].split("&")[0] !== oldUrlParams[0].split("&")[0];
	}

	function fetch(query_start_location) {
		$scope.isLoading = true;
		$scope.isFilterMenuLoading = true;
		$scope.showApply = true;
		var urlParams = $location.search();

		$scope.limit = urlParams.t && urlParams.t !== "" ? $scope.data.limit_group : $scope.data.limit_all;
		$scope.data.q = urlParams.q;

		var	params = {
					query: urlParams.q,
					query_start_location: query_start_location,
					count: $scope.limit,
					source: urlParams.t,
					portal: $rootScope.portal_id,
					include_facets: false
				},
				additionalQuery = getAdditionalQuery(urlParams);

		if(!isAllSearchSource(urlParams)) {
			$scope.collpaseFacets = false;
			if($scope.data.searchSources[urlParams.t]) {
				$scope.t_label = $scope.data.searchSources[urlParams.t].name;
			}
			$scope.showFilterIcon = true;
		} else {
			$scope.t_label = "${All}";
			$scope.showFilterIcon = false;
			$scope.collpaseFacets = true;
		}

		if ($scope.options.show_did_you_mean == "true")
			params.include_suggestions = true;

		if(urlParams.t && urlParams.t !== "" && additionalQuery !== "") {
			params.additionalQuery = additionalQuery;
		}

		spFacetsClientService.search(params).then(function(response) {
			var searchResults = response.data.result.results.map(function(result) {
				result.templateID = "sp-search-source-" + result.__search_source_id__ + ".html";
				return result;
			});
			if(query_start_location > 0) {
				$scope.results = $scope.results.concat(searchResults);

			} else {
				$scope.results = searchResults;
			}

			$scope.isLoading = false;

			if (response.data.result.pagination_supported) {
				generatePagination(searchResults, query_start_location);
			} else {
				$scope.showPagination = false;
			}

			if (response.data.result.suggestions)
				$scope.data.suggestions = response.data.result.suggestions;
		});

		var paramsCopy = JSON.parse(JSON.stringify(params))
		paramsCopy.include_facets = true;
		paramsCopy.include_suggestions = false;

		spFacetsClientService.search(paramsCopy).then(function(response) {
			$scope.isFilterMenuLoading = false;
			if (!response.data.result.pagination_supported) {
				$scope.endPagination = getEndPagination(response.data.result.results, hasFacet(response.data.result.facets, params.source));
			}
		});

		$scope.isFilterApplied = spFacetManager.isAnyFacetSelected();

		if(spAriaUtil.isAccessibilityEnabled()) {
			setFocusSearchResult();
		}
	}

	spFacetManager.subscribe("spFacets.refresh.data", "Pills", onFacetsData);

	function isAllSearchSource(urlParams) {
		return !urlParams.t || urlParams.t == "";
	}

	function setFocusSearchResult() {
		$timeout(function() {
			var element = $element.find(".results-heading")[0];
			if(element) {
				element = angular.element(element);
				element.focus();
			}
		}, 2500);
	}

	function setFocusNextItem(index) {
		$timeout(function() {
			var element = $element.find(".result-item")[index];
			if(element) {
				element = element.querySelector("a");
				element = angular.element(element);
				element.focus();
			}
		}, 500);
	}

	function generatePagination(results, previousIndex) {
			var last = results[results.length-1];
			$scope.showPagination = true;
			$scope.showLoadMore= last && !last.isLastResult;

		if(last && last.query_location != undefined) {
				$scope.query_start_location = last.query_location + 1;
			} else {
				$scope.query_start_location = 0;
			}

		  if(previousIndex > 0) {
				setFocusNextItem(previousIndex);
			}
	}

	function hasFacet(facets, searchSource) {
		if(searchSource && searchSource !== "") {
			return facets  && facets[searchSource] && facets[searchSource].length > 0
		} else {
			for(var key in facets) {
				if(facets[key].length > 0) {
					return true;
				}
			}
		}
		return false;
	}

	function getEndPagination(results, hasFacet) {
		if(results.length >= $scope.limit) {
			if(hasFacet) {
				return "${Results are limited to }" + $scope.limit + "${ items per search. Try using filters or more specific keywords.}";
			}
			return "${Results are limited to }" + $scope.limit + "${ items per search. Try using more specific keywords.}";
		}

		return "${End of results}";
	}

	function getAdditionalQuery(params) {
		var paramsCopy = _.clone(params);

		delete paramsCopy.q;
		delete paramsCopy.t;
		delete paramsCopy.id;
		delete paramsCopy.spa;

		if (_.isEmpty(paramsCopy))
			return "";

		for(var key in paramsCopy) {
			if(paramsCopy.hasOwnProperty(key))
				paramsCopy[key] = processURLProperty(paramsCopy[key]);
		}

		return paramsCopy;
	}

	function propertyIsArray(prop) {
		return prop.charAt(0) === '[' && prop.charAt(prop.length - 1) === ']';
	}

	function processURLProperty(property) {
		if (propertyIsArray(property)) {
			var properties = property.substring(1, property.length - 1).split(",");
			properties = properties.map(function(prop) {
				return prop.split("%2C").join(",");
			});
			return properties;
		} else {
			return property;
		}
	}

	function findItems(facet, key, valueArr) {
		if (!Array.isArray(valueArr))
			valueArr = [valueArr];

		var items = facet.items.filter(function(item) {
			return valueArr.some(function(value) {
				return value === item.value;
			})
		});

		if(items && items.length > 0) {
			return items;
		}

		return null;
	}

	function findFacet(facets, key) {
		var f = null;
		if(facets && facets.length > 0) {
			f = facets.filter(function(d) {
					return d.id === key;
			});
		}

		if(f && f.length > 0) {
			return f[0];
		}

		return null;
	}

	function onFacetsData(params) {
		var query = params.query,
				facets = params.data[query.t],
				pills = {};

		var keys = Object.keys(query);
		keys.forEach(function(k) {

			var facet = findFacet(facets, k);
			if(facet) {
				var items = findItems(facet, k, processURLProperty(query[k]));
				if(items) {
					items.forEach(function(item) {
						if(!pills[item.label]) {
							pills[item.label] = {id: k, label: item.label, facet: facet, item: item};
						} else {
							//update previous pill
							updatPreviousPill(pills, item.label);
							//add current pill
							var label = getLabel(facet, item);
							pills[label] = {id: k, label: label, facet: facet, item: item};
						}
					});
				}
			}
		});
		$scope.data.pills = _.values(pills);
	}

	function getLabel(facet, item) {
		return item.label + " (" + facet.label + ")";
	}

	function updatPreviousPill(pills, label) {
		var previous = pills[label],
				updatedLabel = getLabel(previous.facet, previous.item);
		previous.label = updatedLabel;
		pills[updatedLabel] = previous;
		delete pills[label];
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.header {
	padding: 10px;
}

button.toggle-icon {
  background-color: transparent;
}

a.question-tag {
  color: #39739d;
  background-color: #e1ecf4;
  border: 1px solid #e1ecf4;
  display: inline-block;
  margin: 4px 4px 4px 0;
  border-radius: 0;
  text-align: center;
  line-height: 1;
  padding: .4em .5em;
}

.loading-icon {
  text-align: center;
  padding: 30px;
}

.loading-icon div {
  padding: 10px;
}

.pagination-section {
	text-align: center;
}

.panel-title:focus {
  outline: -webkit-focus-ring-color auto 5px;
}

.search-header {
  padding-top: 15px;
  padding-bottom: 15px;
}

.pills {
  display: flex;
}

.pills-label {
  min-width: 80px;
  margin-top: 5px;
}

h2 {
  display: inline-block;
}

.btn-link {
  padding: 0;
}

.flex {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

.flex h2 {
  word-break: break-word;
}

.search-result-xs {
  margin: 0 -7px 0 -8px;
}

.search-overlay {
  width: 100%;
  height: 100%;
  min-height: 100vh;
  position: absolute;
  z-index: 2;
  top: 0;
  left: 0;
  border-left: 0;
  border-right: 0;
  margin-top: -1rem;
  background: #FFF;
}

.search-filter-menu {
  z-index: 3 !important;
  opacity: 0.9;
  height: 100vh;
}

.search-overlay .header {
  text-align: center;
}

.filter-icon {
  color: #717171;
}

.disabled {
  color: #ddd;
}

.results-heading {
  padding-top: 3px;
  padding-bottom: 2px;
}

.results-heading:focus {
  outline: none;
}

.facet-pill-container {
  padding-top: 5px;
  padding-bottom: 5px;
}

.sc {
  i.ta-icon, i.ta-img {
    width: 30px;
    height: 30px;
    line-height: 20px;
    background-size: contain;
    display: inline-block;
    background-repeat: no-repeat;
    background-position: center center;
    text-align: center;
    float:left;
    padding-right: 8px;
  }
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function(scope, elem) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.resultTemplates);
}]]></link>
        <name>Faceted Search Updated</name>
        <option_schema>[{"hint":"Maximum number of search results when not specifying a search group (default 30)","name":"max_all","section":"Behavior","label":"Max results for All search","type":"integer"},{"hint":"Maximum number of search results when specifying a search group (default 15)","name":"max_group","section":"Behavior","label":"Max results for single search source","type":"integer"},{"name":"show_did_you_mean","default_value":"false","section":"Behavior","label":"Show Did You Mean","type":"boolean"},{"name":"facet_list_title","section":"Presentation","default_value":"FILTERS","label":"Facet List Title","type":"string"},{"name":"title","section":"Presentation","label":"Typeahead Search - Title","type":"string"},{"name":"color","section":"Presentation","label":"Typeahead Search - Color","type":"string"},{"name":"glyph","section":"Presentation","label":"Typeahead Search - Glyph","type":"string"},{"name":"size","section":"Presentation","label":"Typeahead Search - Size","type":"string"},{"hint":"Number of typeahead search results returned (default 15)","name":"limit","section":"Behavior","label":"Typeahead Search - Limit","type":"integer"},{"name":"show_typeahead_search","section":"Presentation","default_value":"true","label":"Show Typeahead Search Box","type":"boolean"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[data.showPrices = $sp.showCatalogPrices();
data.q = $sp.getParameter('q');
data.t = $sp.getParameter('t');
data.searchSources = {};
data.resultTemplates = {};

options.refresh_page_on_search_submission = false;

data.typeaheadSearchWidget = $sp.getWidget('typeahead-search', options);
data.breadcrumbsWidget = $sp.getWidget('breadcrumbs');
data.limit_group = options.max_group || 15;
data.limit_all = options.max_all || 30;
data.showTypeaheadSearch = options.show_typeahead_search == "true";

var portalID = $sp.getPortalRecord().getUniqueValue();
var searchSources = $sp.getSearchSources(portalID);
var i = 0;
searchSources.forEach(function(searchSource) {
	data.resultTemplates["sp-search-source-" + searchSource.id + ".html"] = $sp.translateTemplate(searchSource.template);
	data.searchSources[searchSource.id] = {
		name: searchSource.name,
		id: searchSource.id,
		order: i++
	};
});

if (data.t) {
	data.t_label = data.searchSources[data.t].name;
} else {
	data.t_label = gs.getMessage("All");
}
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>A762682</sys_created_by>
        <sys_created_on>2019-08-14 08:54:35</sys_created_on>
        <sys_id>799d98891bd733006c3a4222dd4bcb8c</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Faceted Search Updated</sys_name>
        <sys_package display_value="GIT" source="x_380489_git_porta">957eb99c1bb23300d8ab2136ec4bcb56</sys_package>
        <sys_policy/>
        <sys_scope display_value="GIT">957eb99c1bb23300d8ab2136ec4bcb56</sys_scope>
        <sys_update_name>sp_widget_799d98891bd733006c3a4222dd4bcb8c</sys_update_name>
        <sys_updated_by>A762682</sys_updated_by>
        <sys_updated_on>2019-08-14 08:54:54</sys_updated_on>
        <template><![CDATA[<div>
  <div>
  		<div class="row header">
      <div class="hidden-xs col-md-8">
        <sp-widget widget="data.breadcrumbsWidget"></sp-widget>
      </div>
      <div class="col-md-4" ng-if="data.showTypeaheadSearch">
        <sp-widget widget="data.typeaheadSearchWidget"></sp-widget>
      </div>
    </div>
    <div class="row">
      <div class="col-sm-3 hidden-xs">
        <sp-search-nav search-sources="data.searchSources" q="data.q" t="data.t"></sp-search-nav>
        <sp-facet-lists collapsed="collpaseFacets" list-title="options.facet_list_title" search-sources="data.searchSources" t="data.t"></sp-facet-lists>
		</div>
      <div class="col-sm-9">
        <div class="panel panel-default">
          <div ng-if="isLoading || results.length>0" class="panel-heading flex">
            <h2 class="h4 panel-title results-heading" tabindex="0">{{t_label}} ${ results for '{{data.q}}'}</h2>
            <button class="btn btn-link hidden visible-xs pull-right" aria-label="${Filter}" ng-class="{'filter-icon': !isFilterApplied}" ng-click="openFilterMenu()"><fa name="filter" /></button>
          </div>
            <div ng-if="data.pills && data.pills.length>0" class="panel-heading flex break-word hidden-xs facet-pill-container">
               <div class="h4 panel-title pills">
                <span class="pills-label">${Filtering by}</span>
                <div>
                  <sp-facet-pill facet="pill" ng-repeat="pill in data.pills"></sp-facet-pill>
                </div>
              </div>
              <div>
                  <button class="btn btn-link" ng-click="clearAll()" aria-label="${Clear all active facets}">${Clear All}</button>
          		</div>
            </div>

          <div ng-show="isLoading" class="loading-icon">
            <i class="fa fa-spinner fa-spin fa-3x fa-fw" style="font-size:24px"></i>
            <div class="">${Hold on, your results are loading}...</div>
          </div>
          <div ng-show="!isLoading" class="panel-default">
            <div ng-if="results.length==0" class="panel-default">
              <div class="panel-heading">
                <h2 class="h4 panel-title">${No results}</h2>
                <button ng-if="showFilterIcon" class="btn btn-link hidden visible-xs pull-right" ng-class="{'filter-icon': !isFilterApplied}" ng-click="openFilterMenu()"><fa name="filter" /></button>
              </div>
              <div class="panel-body wrapper break-word">
                <p>${Your search - <b>{{data.q}}</b> - did not match any documents}</p>
                <div ng-if="options.show_did_you_mean && data.suggestions.length > 0">
                  ${Did you mean}:
                  <ul>
                    <li ng-repeat="term in data.suggestions track by $index">
                      <a href="javascript:void(0)" ng-click="search(term)">{{term}}</a>
                    </li>
                  </ul>
                </div>
                <p ng-if="options.show_did_you_mean && data.suggestions.length > 0">${Other suggestions}:</p>
                <p ng-if="!options.show_did_you_mean || data.suggestions.length == 0">${Suggestions}:</p>
                <ul>
                  <li>${Make sure all words are spelled correctly}</li>
                  <li>${Try different, more general, or fewer keywords}</li>
                </ul>
              </div>
            </div>
            <div ng-if="results.length>0" ng-class="{'search-result-xs': smallScreenSize}">
              <div role="list">
              <div role="listitem" ng-repeat="item in results" class="panel-body b-b result-item">
                <div ng-include="item.templateID"></div>
              </div>
              </div>
             <div role="contentinfo" class="panel-body b-b">
                <div class="pagination-section">
                  <span ng-if="showPagination && showLoadMore"><button type="button" class="btn btn-link" aria-label="${Load more results}" ng-click="fetchMoreResults(query_start_location)">${Load more results}</button></span>
                  <span ng-if="showPagination && !showLoadMore" aria-label="${End of results}">${End of results}</span>
                  <span ng-if="!showPagination" aria-label="{{endPagination}}">{{endPagination}}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="hidden search-overlay panel panel-default list-view" ng-class="{'visible-xs': showFilterMenu}">
    <div class="panel-heading header">
      <span>
        <button class="btn btn-link clear pull-left" ng-click="cancel()" aria-label="${Cancel}">${Cancel}</button>
      </span>
      <span style="visibility: hidden;">
        ${results}
      </span>
      <span>
        <button class="btn btn-link pull-right"  ng-class="{'disabled': !showApply}" ng-click="apply()" aria-label="${Done}">${Done}</button>
      </span>
    </div>
    <sp-search-nav show-toggle="true" list-view="true" search-sources="data.searchSources" q="data.q" t="data.t"></sp-search-nav>
    <sp-facet-lists collapsed="true" collapsed-searchsource="collpaseFacets" toggle-searchsource="true" list-title="options.facet_list_title" search-sources="data.searchSources" t="data.t"></sp-facet-lists>
  </div>
  <div class="hidden search-overlay search-filter-menu" ng-class="{'visible-xs': showFilterMenu && isFilterMenuLoading}">
    <div class="loading-icon">
      <i class="fa fa-spinner fa-spin fa-3x fa-fw" style="font-size:24px"></i>
      <div class="">${Hold on, your filters are loading}...</div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
